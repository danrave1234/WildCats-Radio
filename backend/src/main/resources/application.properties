# Database Configuration - Optimized for PostgreSQL Cloud Deployment
spring.datasource.url=${JDBC_DATABASE_URL:jdbc:postgresql://ep-still-darkness-a126282w-pooler.ap-southeast-1.aws.neon.tech/wildcatradiodb?user=wildcatradiodb_owner&password=npg_p8dU2CbBkIgl&sslmode=require&channelBinding=require&prepareThreshold=0&preparedStatementCacheQueries=0&preferQueryMode=simple&autosave=conservative}
spring.datasource.username=${JDBC_DATABASE_USERNAME:wildcatradiodb_owner}
spring.datasource.password=${JDBC_DATABASE_PASSWORD:npg_p8dU2CbBkIgl}
spring.datasource.driver-class-name=org.postgresql.Driver

# HikariCP Connection Pool - Optimized for Cloud PostgreSQL
spring.datasource.hikari.auto-commit=false
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=900000
spring.datasource.hikari.maximum-pool-size=${DATABASE_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DATABASE_MIN_IDLE:2}
spring.datasource.hikari.pool-name=WildCatsRadioPool
spring.datasource.hikari.leak-detection-threshold=60000

# JPA/Hibernate Configuration - Simplified and Optimized
# Auto-update schema based on entities
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.use_sql_comments=false
spring.jpa.properties.hibernate.generate_statistics=false

# PostgreSQL Specific Optimizations
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=true
spring.jpa.properties.hibernate.connection.autocommit=false
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Ensure schema.sql runs before JPA validation
spring.sql.init.mode=always
spring.jpa.defer-datasource-initialization=true
# Be lenient if columns already exist (we use IF NOT EXISTS anyway)
spring.sql.init.continue-on-error=true

# Schema Management - Prevent Cached Plan Issues
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=true
spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=false
spring.jpa.properties.hibernate.connection.isolation=2

# Timezone configuration to handle date/time correctly

# JWT Configuration
jwt.secret=${JWT_SECRET:wildCatsRadioSecretKey2023SecureTokenSigningKeyForJWT}
jwt.expiration=${JWT_EXPIRATION:86400000}

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:wildcatsradio@gmail.com}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# Make email optional to prevent app from crashing if email config is not set
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# Server Configuration
server.port=8080
server.address=0.0.0.0

# Enable serving static content
spring.web.resources.add-mappings=true

# Logging
logging.level.org.springframework.security=${LOG_LEVEL_SECURITY:INFO}
logging.level.com.wildcastradio=${LOG_LEVEL_APP:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_HIBERNATE:INFO}

# Dynamic CORS Configuration - handled by CorsConfig.java
# Custom CORS origins can be set via environment variable: CORS_ALLOWED_ORIGINS=http://localhost:5173,https://your-domain.com
# No need to define the property here as it's read directly from environment variables

# WildCats Radio Configuration

# Spring Boot Application Domain (for WebSocket connections and API endpoints)
# This should be your deployed app domain
app.domain=${APP_DOMAIN:https://api.wildcat-radio.live}

# Icecast Server Configuration (using domain name)
# Note: FFmpeg connects directly to Icecast server port (8000), not through reverse proxy
icecast.host=${ICECAST_HOST:icecast.software}
icecast.port=${ICECAST_PORT:8000}
icecast.source.username=${ICECAST_USERNAME:source}
icecast.source.password=${ICECAST_PASSWORD:hackme}
icecast.mount.point=${ICECAST_MOUNT:/live.ogg}
icecast.admin.username=admin
icecast.admin.password=hackme

# WebSocket Configuration - Optimized for Performance and Low Latency
spring.websocket.max-text-message-size=65536
spring.websocket.max-binary-message-size=2097152
spring.websocket.max-binary-message-buffer-size=32768
spring.websocket.max-text-message-buffer-size=16384
spring.websocket.max-session-idle-timeout=300000

# FFmpeg Streaming Configuration for Icecast - enhanced for cloud stability and race condition handling
ffmpeg.reconnect.enabled=true
ffmpeg.reconnect.delay.max=10
ffmpeg.rw.timeout=10000000
ffmpeg.retry.attempts=8

# Spring Boot Performance Optimizations
spring.profiles.active=${SPRING_PROFILES_ACTIVE:default}
spring.jpa.open-in-view=false
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.default-property-inclusion=NON_NULL
spring.mvc.async.request-timeout=30000
spring.task.execution.pool.core-size=4
spring.task.execution.pool.max-size=8
spring.task.execution.pool.queue-capacity=100
spring.task.scheduling.pool.size=4

# Server Configuration - Optimized for Performance
server.tomcat.connection-timeout=60000
server.tomcat.max-connections=200
server.tomcat.accept-count=100
server.tomcat.max-threads=100
server.tomcat.min-spare-threads=10
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024

# Enhanced logging for production debugging
logging.level.com.wildcastradio.icecast=${LOG_LEVEL_ICECAST:INFO}
logging.level.com.wildcastradio.config=${LOG_LEVEL_CONFIG:INFO}

# Connection pool settings moved to consolidated database configuration section above

# CORS configuration for cloud deployment
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
management.endpoints.web.cors.allowed-headers=*

# WebSocket SockJS Configuration - Optimized for Low Latency
spring.websocket.sockjs.heartbeat-time=25000
spring.websocket.sockjs.disconnect-delay=5000
spring.websocket.sockjs.client-library-url=https://cdn.jsdelivr.net/npm/sockjs-client@1/dist/sockjs.min.js

# HTTP Client Configuration - Optimized for External API Calls
spring.cloud.openfeign.client.config.default.connect-timeout=15000
spring.cloud.openfeign.client.config.default.read-timeout=30000
management.server.port=8081
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true
management.endpoint.info.enabled=true

# Cookie Security (env-aware; false for local http, true for prod https)
app.security.cookie.secure=${APP_COOKIE_SECURE:false}

# Profanity filter configuration
# Enable external profanity detection using Google Perspective API (default: false)
profanity.external.enabled=${PROFANITY_EXTERNAL_ENABLED:false}
# API key for Google Perspective API (keep empty in repo; set via env var)
profanity.perspective.apiKey=${PERSPECTIVE_API_KEY:}
# Threshold for toxicity score [0.0 - 1.0] to trigger replacement (default: 0.85)
profanity.perspective.threshold=${PERSPECTIVE_THRESHOLD:0.85}
# Comma-separated language codes to send to Perspective (default covers English, Tagalog, Bisaya/Cebuano)
profanity.perspective.languages=${PERSPECTIVE_LANGUAGES:en,tl,ceb}
# Additional words to add to the local profanity dictionary (comma-separated)
profanity.extra.words=${EXTRA_PROFANITY_WORDS:}
# Additional compact phrases (checked after removing spaces/punctuation), comma-separated
profanity.extra.compact.phrases=${EXTRA_PROFANITY_COMPACT_PHRASES:}
# Local profanity dictionary file (one entry per line); created if missing
profanity.dictionary.file=${PROFANITY_DICTIONARY_FILE:./data/profanity-words.txt}

# Live stream health monitor configuration (recovery-first)
# Do not auto-end on unhealthy by default; can be overridden with env BROADCAST_AUTO_END=true
broadcast.healthCheck.enabled=${BROADCAST_HEALTHCHECK_ENABLED:true}
broadcast.healthCheck.intervalMs=${BROADCAST_HEALTHCHECK_INTERVAL_MS:15000}
broadcast.healthCheck.unhealthyConsecutiveThreshold=${BROADCAST_HEALTHCHECK_UNHEALTHY_THRESHOLD:3}
broadcast.healthCheck.autoEnd=${BROADCAST_AUTO_END:false}

# API-wide Rate Limiting (Bucket4j, in-memory)
# Master switch to enable/disable all rate limiting without code changes
ratelimit.enabled=true
# Authentication endpoints (/api/auth/**): limit per unique username/email per minute
ratelimit.auth.per-username-per-minute=5
# Authentication endpoints (/api/auth/**): limit per client IP per minute
ratelimit.auth.per-ip-per-minute=50
# General API endpoints (/api/**): limit per client IP per minute
ratelimit.api.per-ip-per-minute=300
# WebSocket handshake attempts: limit per client IP per minute
# NOTE: Authenticated users with role DJ are EXEMPT from this limit on /ws/live
#       to protect critical broadcast sessions from being blocked by handshake limits.
ratelimit.ws.handshake-per-ip-per-minute=60
# When true, trust X-Forwarded-For header for client IP (useful behind proxies/CDN)
ratelimit.use-x-forwarded-for=true