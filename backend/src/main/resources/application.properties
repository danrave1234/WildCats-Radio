# Database Configuration
spring.datasource.url=${JDBC_DATABASE_URL:jdbc:postgresql://ep-orange-shape-a1rbuqku-pooler.ap-southeast-1.aws.neon.tech/neondb?user=neondb_owner&password=npg_gvt8uxemHla6&sslmode=require}
spring.datasource.username=${JDBC_DATABASE_USERNAME:postgres}
spring.datasource.password=${JDBC_DATABASE_PASSWORD:wildcatradio-123456}
spring.datasource.driver-class-name=org.postgresql.Driver
# Connection pool settings
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.maximum-pool-size=10
spring.datasource.hikari.minimum-idle=5
spring.datasource.hikari.idle-timeout=300000
spring.datasource.hikari.max-lifetime=1200000

# JPA Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
# Prevent JPA from failing on startup if DB is not available
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults=false

# Timezone configuration to handle date/time correctly
spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Manila
spring.jackson.time-zone=Asia/Manila

# JWT Configuration
jwt.secret=${JWT_SECRET:wildCatsRadioSecretKey2023SecureTokenSigningKeyForJWT}
jwt.expiration=${JWT_EXPIRATION:86400000}

# Email Configuration
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:wildcatsradio@gmail.com}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# Make email optional to prevent app from crashing if email config is not set
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# Server Configuration
server.port=${PORT:8080}

# Enable serving static content
spring.web.resources.add-mappings=true

# Logging
logging.level.org.springframework.security=${LOG_LEVEL_SECURITY:INFO}
logging.level.com.wildcastradio=${LOG_LEVEL_APP:INFO}
logging.level.org.hibernate.SQL=${LOG_LEVEL_HIBERNATE:INFO}

# CORS Configuration
# Comma-separated list of allowed origins (can be overridden with CORS_ALLOWED_ORIGINS environment variable)
# CORS_ALLOWED_ORIGINS=http://localhost:5173,https://wildcat-radio-f05d362144e6.herokuapp.com,https://wildcat-radio-f05d362144e6.autoidleapp.com

# WildCats Radio Configuration

# Spring Boot Application Domain (for WebSocket connections and API endpoints)
# This should be your deployed app domain (e.g., your-app.herokuapp.com)
app.domain=${APP_DOMAIN:https://wildcat-radio-f05d362144e6.autoidleapp.com}

# Google Cloud Icecast Server Configuration (for audio streaming only)
icecast.host=${ICECAST_HOST:34.142.131.206}
icecast.port=${ICECAST_PORT:443}
icecast.source.username=${ICECAST_USERNAME:source}
icecast.source.password=${ICECAST_PASSWORD:hackme}
icecast.mount.point=${ICECAST_MOUNT:/live.ogg}
icecast.admin.username=admin
icecast.admin.password=hackme

# WebSocket Configuration
# Configure maximum text message size (64KB)
spring.websocket.max-text-message-size=65536
# Configure maximum binary message size (1MB) for audio streaming
spring.websocket.max-binary-message-size=1048576

# WebSocket Configuration for Audio Streaming
spring.websocket.max-binary-message-buffer-size=65536
spring.websocket.max-text-message-buffer-size=65536
spring.websocket.max-session-idle-timeout=30000

# FFmpeg Streaming Configuration for Google Cloud Icecast
ffmpeg.reconnect.enabled=true
ffmpeg.reconnect.delay.max=5
ffmpeg.rw.timeout=5000000
ffmpeg.retry.attempts=3

# Google Cloud Deployment Configuration
# Enable production optimizations when deployed
spring.profiles.active=${SPRING_PROFILES_ACTIVE:default}

# Network timeouts for cloud deployment
server.tomcat.connection-timeout=60000
server.tomcat.max-connections=200

# Enhanced logging for production debugging
logging.level.com.wildcastradio.icecast=${LOG_LEVEL_ICECAST:INFO}
logging.level.com.wildcastradio.config=${LOG_LEVEL_CONFIG:INFO}

# Connection pool optimizations for cloud deployment
spring.datasource.hikari.maximum-pool-size=${DATABASE_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DATABASE_MIN_IDLE:5}

# Additional CORS configuration for Google Cloud
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
management.endpoints.web.cors.allowed-headers=*